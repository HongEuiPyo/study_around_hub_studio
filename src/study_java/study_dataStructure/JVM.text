
JVM

1. JVM 이란
JVM이란 Java Virtual Machine의 줄임말
자바 어플리케이션을 어느 CPU보다 OS에서도 실행할 수 있게 지원하는 역할을 수행
자바 코드를 컴파일하여 바이트 코드로 변환하여 해당 운영체제가 이해할 수 있는 기계어로 실행

JVM의 구성은 크게 4가지로 구분됨
- Class Loader
- Execution Engine
- Garbage Collector
- Runtime Data Area

                            (Class Loader)
                                  ↑
                                  ↓
                          (Runtime Data Area)
[(Method Area) (Heap Area) (Stack Area) (PC Register) (Native Method Stack)]
      ↑                         ↑
      ↓                         ↓
(Execution Engine) ↔ (Native Method Interface) ↔ (Native Method Libraries)


2. 자바 어플리케이션 실행 과정
- 어플리케이션이 실행되면 JVM이 OS로부터 메모리를 할당 받음
  JVM은 할당 받은 메모리를 용도에 따라 영역을 구분하여 관리
- 자바 컴파일러(javac.exe)가 자바 소스코드(.java)를 읽어 바이트 코드(.class)로 변환
- Class Loader를 통해 바이트 코드를 JVM으로 로딩
- 로딩된 바이트 코드는 Execution Engine을 통해 해석됨
- 해석된 바이트 코드는 Runtime Data Areas에 배치되어 실행됨
  실행되는 과정에서 GC같은 작업이 수행됨


3. Execution Engine
Runtime Data Area에 할당된 바이트 코드를 실행시키는 주체
코드를 실행하는 방식은 크게 2가지 방식이 존재

Interpreter: 바이트 코드를 해석하여 실행하는 역할을 수행
             다만 같은 메서드라도 여러번 호출될 때 매번 새로 수행해야 함
JIT(Just In Time) Compiler: Interpreter의 단점을 해소
                            반복되는 코드를 발견하여 전체 바이트 코드를 컴파일하고 그것을 Native Code로 변경하여 사용
Garbage Collector: 더이상 참조되지 않는 메모리 객체를 모아 제거하는 역할을 수행
                   일반적으로 자동으로 실행되지만, 수동으로 실행하기 위해 'System.gc()'를 사용할 수 있음(다만, 실행이 보장되지는 않음)

※Native의 의미: 자바에서 부모가 되는 C언어나 C++, 어셈블리어를 의미


4. Garbage Collector
앞으로 사용되지 않는 객체의 메모리를 Garbage라고 부름
이런 Garbage를 정해진 스케줄에 의해 정리해주는 것을 GC(Garbage Collection)라 부름

Stop The World


